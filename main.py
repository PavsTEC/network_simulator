"""
Simulador de Protocolos de Red - Versi√≥n Modular
Este main puede funcionar con cualquier protocolo que implemente ProtocolInterface.
"""

import time
import importlib
import sys
import threading
from typing import Type, Optional
from simulation.simulator import Simulator
from protocols.protocol_interface import ProtocolInterface


def get_available_protocols() -> dict:
    """
    Descubre autom√°ticamente todos los protocolos disponibles.
    
    Returns:
        Dict con {nombre: clase_protocolo} de todos los protocolos disponibles
    """
    available_protocols = {}
    
    # Lista de protocolos conocidos - se puede expandir f√°cilmente
    protocol_modules = [
        'utopia',
        'stop_and_wait',
        'par',
        'sliding_window',
        'go_back_n',
        'selective_repeat',
    ]
    
    for module_name in protocol_modules:
        try:
            # Importar din√°micamente el m√≥dulo del protocolo
            module = importlib.import_module(f'protocols.{module_name}')
            
            # Buscar clases que hereden de ProtocolInterface
            for attr_name in dir(module):
                attr = getattr(module, attr_name)
                if (isinstance(attr, type) and 
                    issubclass(attr, ProtocolInterface) and 
                    attr != ProtocolInterface):
                    
                    # Crear una instancia temporal para obtener el nombre
                    temp_instance = attr("temp")
                    protocol_name = temp_instance.get_protocol_name()
                    available_protocols[protocol_name] = attr
                    
        except ImportError as e:
            print(f"[Warning] No se pudo cargar protocolo {module_name}: {e}")
            continue
    
    return available_protocols


def select_protocol() -> Optional[Type[ProtocolInterface]]:
    """
    Permite al usuario seleccionar un protocolo de los disponibles.
    
    Returns:
        Clase del protocolo seleccionado o None si se cancela
    """
    available_protocols = get_available_protocols()
    
    if not available_protocols:
        print("‚ùå No se encontraron protocolos disponibles.")
        return None
    
    print("\nüìã Protocolos Disponibles:")
    print("=" * 40)
    
    protocol_list = list(available_protocols.items())
    for i, (name, protocol_class) in enumerate(protocol_list, 1):
        print(f"  {i}. {name}")
    
    print(f"  0. Salir")
    
    while True:
        try:
            choice = input(f"\nSelecciona un protocolo (1-{len(protocol_list)}, 0 para salir): ").strip()
            
            if choice == '0':
                return None
            
            choice_num = int(choice)
            if 1 <= choice_num <= len(protocol_list):
                selected_protocol = protocol_list[choice_num - 1][1]
                print(f"‚úÖ Protocolo seleccionado: {protocol_list[choice_num - 1][0]}")
                return selected_protocol
            else:
                print(f"‚ùå Opci√≥n inv√°lida. Ingresa un n√∫mero entre 1 y {len(protocol_list)}.")
                
        except (ValueError, KeyboardInterrupt):
            print("‚ùå Entrada inv√°lida. Intenta nuevamente.")


def configure_simulation() -> dict:
    """
    Permite al usuario configurar los par√°metros de la simulaci√≥n.
    
    Returns:
        Dict con la configuraci√≥n de la simulaci√≥n
    """
    print("\n‚öôÔ∏è  Configuraci√≥n de la Simulaci√≥n:")
    print("=" * 40)
    
    config = {}
    
    # Configuraci√≥n de m√°quinas
    try:
        config['machine_a_error_rate'] = float(input("Tasa de error m√°quina A (0.0-1.0) [0.1]: ").strip() or "0.1")
        config['machine_a_delay'] = float(input("Retardo transmisi√≥n m√°quina A (segundos) [1.0]: ").strip() or "1.0")

        config['machine_b_error_rate'] = float(input("Tasa de error m√°quina B (0.0-1.0) [0.1]: ").strip() or "0.1")
        config['machine_b_delay'] = float(input("Retardo transmisi√≥n m√°quina B (segundos) [1.0]: ").strip() or "1.0")

        config['send_interval'] = float(input("Intervalo entre env√≠os (segundos) [2.0]: ").strip() or "2.0")
        
        # Validaciones
        for key in ['machine_a_error_rate', 'machine_b_error_rate']:
            if not 0.0 <= config[key] <= 1.0:
                raise ValueError(f"Tasa de error debe estar entre 0.0 y 1.0")
        
        for key in ['machine_a_delay', 'machine_b_delay', 'send_interval']:
            if config[key] < 0:
                raise ValueError(f"Los tiempos deben ser no negativos")
                
    except ValueError as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        print("üîÑ Usando valores por defecto...")
        config = {
            'machine_a_error_rate': 0.1,
            'machine_a_delay': 1.0,
            'machine_b_error_rate': 0.1,
            'machine_b_delay': 1.0,
            'send_interval': 2.0
        }
    
    return config


def command_listener(sim: Simulator):
    """
    Thread que escucha comandos del usuario durante la simulaci√≥n.

    Args:
        sim: Instancia del simulador
    """
    print("\nüí° Comandos disponibles:")
    print("   'p' o 'pause'  - Pausar simulaci√≥n")
    print("   'r' o 'resume' - Reanudar simulaci√≥n")
    print("   's' o 'status' - Mostrar estado")
    print("   'q' o 'quit'   - Salir\n")

    while True:
        try:
            command = input().strip().lower()

            if command in ['p', 'pause']:
                sim.pause_simulation()
            elif command in ['r', 'resume']:
                sim.resume_simulation()
            elif command in ['s', 'status']:
                if sim.is_paused():
                    print("\nüìä Estado: ‚è∏Ô∏è  PAUSADA")
                else:
                    print("\nüìä Estado: ‚ñ∂Ô∏è  EJECUTANDO")
            elif command in ['q', 'quit']:
                print("\nüëã Saliendo de la simulaci√≥n...")
                sim.stop_simulation()
                break
            elif command:
                print(f"\n‚ùå Comando desconocido: '{command}'")
                print("üí° Usa: p (pause), r (resume), s (status), q (quit)")

        except EOFError:
            break
        except Exception as e:
            print(f"\n‚ö†Ô∏è  Error en comando: {e}")


def run_simulation(protocol_class: Type[ProtocolInterface], config: dict):
    """
    Ejecuta la simulaci√≥n con el protocolo y configuraci√≥n especificados.

    Args:
        protocol_class: Clase del protocolo a usar
        config: Configuraci√≥n de la simulaci√≥n
    """
    protocol_name = protocol_class("temp").get_protocol_name()

    print(f"\nüöÄ Iniciando Simulaci√≥n - Protocolo {protocol_name}")
    print("=" * 60)

    # Crear simulador principal
    sim = Simulator()

    # Registrar m√°quinas
    sim.add_machine("A", protocol_class,
                   error_rate=config['machine_a_error_rate'],
                   transmission_delay=config['machine_a_delay'])
    sim.add_machine("B", protocol_class,
                   error_rate=config['machine_b_error_rate'],
                   transmission_delay=config['machine_b_delay'])

    # Mostrar configuraci√≥n
    print(f"\nüìä Configuraci√≥n:")
    print(f"  Protocolo: {protocol_name}")
    print(f"  M√°quina A: error_rate={sim.get_machine_error_rate('A')}, delay={sim.get_machine_transmission_delay('A')}s")
    print(f"  M√°quina B: error_rate={sim.get_machine_error_rate('B')}, delay={sim.get_machine_transmission_delay('B')}s")
    print(f"  Intervalo de env√≠o: {config['send_interval']}s")

    # Verificar si el protocolo es bidireccional
    temp_instance = protocol_class("temp")
    is_bidirectional = temp_instance.is_bidirectional()

    if is_bidirectional:
        print(f"\nüì§ Protocolo bidireccional detectado")
        print(f"   A -> B: Enviando letras (A, B, C...)")
        print(f"   B -> A: Enviando n√∫meros (0, 1, 2...)")
    else:
        print(f"\nüì§ Iniciando env√≠o del abecedario: A -> B")

    # Iniciar thread para escuchar comandos
    command_thread = threading.Thread(target=command_listener, args=(sim,), daemon=True)
    command_thread.start()

    # Inicializar el simulador una sola vez
    sim.start_simulation()

    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    index_a = 0
    index_b = 0
    last_send_time_a = time.time()
    last_send_time_b = time.time() + config['send_interval'] / 2  # Desfasar

    try:
        while sim._running:
            current_time = time.time()

            if not sim.is_paused():
                # Enviar A -> B
                if current_time - last_send_time_a >= config['send_interval']:
                    letter = alphabet[index_a % len(alphabet)]
                    success = sim.send_data("A", "B", letter)

                    if success:
                        print(f"\n[Main] üì® A->B: '{letter}' ({index_a + 1})")
                        index_a += 1

                    last_send_time_a = current_time

                # Enviar B -> A (solo si es bidireccional)
                if is_bidirectional and current_time - last_send_time_b >= config['send_interval']:
                    digit = str(index_b % 10)
                    success = sim.send_data("B", "A", digit)

                    if success:
                        print(f"[Main] üì® B->A: '{digit}' ({index_b + 1})")
                        index_b += 1

                    last_send_time_b = current_time

                # Procesar eventos generados
                sim.run_simulation()

            time.sleep(0.1)  # Sleep m√°s corto para mejor respuesta

    except KeyboardInterrupt:
        print(f"\n[Main] ‚èπÔ∏è  Simulaci√≥n detenida por usuario")
    finally:
        sim.stop_simulation()
        print("\n‚úÖ Simulaci√≥n completada!")


def main():
    """Funci√≥n principal del simulador modular."""
    print("üåê Simulador de Protocolos de Red - Versi√≥n Modular")
    print("=" * 55)
    
    try:
        # Seleccionar protocolo
        protocol_class = select_protocol()
        if protocol_class is None:
            print("üëã Simulaci√≥n cancelada por el usuario.")
            return
        
        # Configurar simulaci√≥n
        config = configure_simulation()
        
        # Ejecutar simulaci√≥n
        run_simulation(protocol_class, config)
        
    except KeyboardInterrupt:
        print("\nüëã Simulaci√≥n cancelada por el usuario.")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()